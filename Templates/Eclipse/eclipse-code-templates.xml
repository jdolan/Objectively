<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="org.eclipse.cdt.core.cSource.contenttype_context" deleted="false" description="" enabled="true" name="Objectively Type Source">${filecomment}

#include &lt;assert.h&gt;

#include &lt;${project_name}/${file_base}.h&gt;

#define _Class _${file_base}

#pragma mark - Object

/**
 * @see Object::dealloc(Object *)
 */
static void dealloc(Object *self) {

	//..

	super(Object, self, dealloc);
}

#pragma mark - ${file_base}

/**
 * @fn ${file_base} *${file_base}::init(${file_base} *self)
 * @memberof ${file_base}
 */
static ${file_base} *init(${file_base} *self) {

	self = (${file_base} *) super(Object, self, init);
	if (self) {

		//..
	}

	return self;
}

//..

#pragma mark - Class lifecycle

/**
 * @see Class::initialize(Class *)
 */
static void initialize(Class *clazz) {

	((ObjectInterface *) clazz-&gt;interface)-&gt;dealloc = dealloc;

	((${file_base}Interface *) clazz-&gt;interface)-&gt;init = init;

	//..
}

/**
 * @fn Class *${file_base}::_${file_base}(void)
 * @memberof ${file_base}
 */
Class *_${file_base}(void) {
	static Class *clazz;
	static Once once;

	do_once(&amp;once, {
		clazz = _initialize(&amp;(const ClassDef) {
			.name = "${file_base}",
			.superclass = _Object(),
			.instanceSize = sizeof(${file_base}),
			.interfaceOffset = offsetof(${file_base}, interface),
			.interfaceSize = sizeof(${file_base}Interface),
			.initialize = initialize,
		});
	});

	return clazz;
}

#undef _Class

</template><template autoinsert="false" context="org.eclipse.cdt.core.cHeader.contenttype_context" deleted="false" description="" enabled="true" name="Objectively Type Header">${filecomment}

#pragma once

#include &lt;Objectively/Object.h&gt;

/**
 * @file
 * @brief ..
 */

typedef struct ${file_base} ${file_base};
typedef struct ${file_base}Interface ${file_base}Interface;

/**
 * @brief ..
 */
struct ${file_base} {

	/**
	 * @brief The superclass.
	 */
	Object object;

	/**
	 * @brief The interface.
	 * @protected
	 */
	${file_base}Interface *interface;

	//.. 
};

/**
 * @brief The ${file_base} interface.
 */
struct ${file_base}Interface {

	/**
	 * @brief The superclass interface.
	 */
	ObjectInterface objectInterface;

	/**
	 * @fn ${file_base} *${file_base}::init(${file_base} *self)
	 * @brief Initializes this ${file_base}.
	 * @param self The ${file_base}.
	 * @return The initialized ${file_base}, or `NULL` on error.
	 * @memberof ${file_base}
	 */
	${file_base} *(*init)(${file_base} *self);

	// ..
};

/**
 * @fn Class *${file_base}::_${file_base}(void)
 * @brief The ${file_base} archetype.
 * @return The ${file_base} Class.
 * @memberof ${file_base}
 */
OBJECTIVELY_EXPORT Class *_${file_base}(void);

</template></templates>
