<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="org.eclipse.cdt.core.cHeader.contenttype_context" deleted="false" description="" enabled="true" name="Objectively Type Header">${filecomment}

#ifndef _${project_name}_${file_base}_h
#define _${project_name}_${file_base}_h

#include &lt;Objectively/object.h&gt;

typedef struct ${file_base} ${file_base};
typedef struct ${file_base}Interface ${file_base}Interface;

/**
 * @brief The ${file_base} type.
 */
struct ${file_base} {

	/**
	 * @brief The parent.
	 */
	Object object;

	//.. 
};

/**
 * @brief The ${file_base} type.
 */
struct ${file_base}Interface {

	/**
	 * @brief The parent.
	 */
	ObjectInterface objectInterface;

	// ..
};

/**
 * @brief The ${file_base} Class.
 */
extern Class __${file_base};

#endif</template><template autoinsert="false" context="org.eclipse.cdt.core.cSource.contenttype_context" deleted="false" description="" enabled="true" name="Objectively Type Source">${filecomment}

#include &lt;assert.h&gt;

#include &lt;Objectively/${file_base}.h&gt;

#pragma mark - Object instance methods

/**
 * @see Object::dealloc(Object *)
 */
static void dealloc(Object *self) {

	//..

	super(Object, self, dealloc);
}

/**
 * @see Object::init(Object *)
 */
static Object *init(${file_base} *self) {

	self = (${file_base} *) super(Object, self, init);
	if (self) {

		//..
	}

	return self;
}

#pragma mark - ${file_base} instance methods

//..

#pragma mark - ${file_base} Class methods

/**
 * see Class::initialize(Class *)
 */
static void initialize(Class *self) {

	((ObjectInterface *) self-&gt;interface)-&gt;dealloc = dealloc;
	((ObjectInterface *) self-&gt;interface)-&gt;init = init;

	//..
}

Class __${file_base} = {
	.name = "${file_base}",
	.superclass = &amp;__Object,
	.instanceSize = sizeof(${file_base}),
	.interfaceSize = sizeof(${file_base}Interface),
	.initialize = initialize,
};
</template></templates>